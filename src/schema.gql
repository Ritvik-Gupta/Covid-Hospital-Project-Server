# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type CovidRegister {
  hospitalId: ID!
  patientId: ID!
  entry: CovidEntry!
  entryDate: DateTime!
}

enum CovidEntry {
  AFFECTED
  RECOVERED
  DEAD
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type HospRegister {
  hospitalId: ID!
  userId: ID!
  joinDate: DateTime!
  forUser: User!
}

type Doctor {
  street: String!
  city: String!
  pincode: String
  userId: ID!
  qualifaction: String!
  asUser: User!
}

type Appointment {
  doctorId: ID!
  patientId: ID!
  assignedDate: DateTime!
}

type Medicine {
  name: String!
  description: String!
}

type PrescribedMed {
  medicineName: String!
  patientId: String!
  prescriptionDate: DateTime!
}

type TestResult {
  patientId: ID!
  reason: TestReasons!
  description: String
  forPatient: Patient!
}

enum TestReasons {
  COVID
  MALARIA
  AIDS
  DENGUE
  VIRAL_FEVER
}

type Patient {
  street: String!
  city: String!
  pincode: String
  userId: ID!
  bloodGroup: BloodGroup!
  asUser: User!
}

enum BloodGroup {
  A_PLUS
  A_MINUS
  B_PLUS
  B_MINUS
  AB_PLUS
  AB_MINUS
  O_PLUS
  O_MINUS
}

type BedRegister {
  bedNo: ID!
  roomNo: ID!
  hospitalId: ID!
  patientId: ID!
  occupiedAtDate: DateTime!
  forBed: Bed!
  forPatient: Patient!
}

type Bed {
  bedNo: ID!
  roomNo: ID!
  hospitalId: ID!
  createDate: DateTime!
}

type Room {
  roomNo: ID!
  hospitalId: ID!
  createDate: DateTime!
  hasBeds: [Bed!]!
}

type Hospital {
  street: String!
  city: String!
  pincode: String
  id: ID!
  adminId: String!
  name: String!
  createDate: DateTime!
  hasRooms: [Room!]!
  userRecords: [HospRegister!]!
  hasAdmin: Admin!
}

type Admin {
  street: String!
  city: String!
  pincode: String
  userId: ID!
  asUser: User!
}

type Staff {
  street: String!
  city: String!
  pincode: String
  userId: ID!
  asUser: User!
}

type User {
  id: ID!
  firstName: String!
  middleName: String
  lastName: String!
  gender: Gender!
  email: String!
  role: UserRoles!
}

enum Gender {
  MALE
  FEMALE
  TRANS
}

enum UserRoles {
  PATIENT
  DOCTOR
  STAFF
  ADMIN
}

input DoctorInput {
  street: String!
  city: String!
  pincode: String
  qualifaction: String!
}

input MedicineInput {
  name: String!
  description: String!
}

input PatientInput {
  street: String!
  city: String!
  pincode: String
  bloodGroup: BloodGroup!
}

input HospitalInput {
  street: String!
  city: String!
  pincode: String
  name: String!
}

input AdminInput {
  street: String!
  city: String!
  pincode: String
}

input StaffInput {
  street: String!
  city: String!
  pincode: String
}

input LoginInput {
  email: String!
  password: String!
}

input UserInput {
  email: String!
  password: String!
  firstName: String!
  middleName: String
  lastName: String!
  gender: Gender!
}

type Query {
  ownsHospitals: [Hospital!]!
  hospitals: [Hospital!]!
  hospital(hospitalId: String!): Hospital
  registeredAtHospital: HospRegister
  covidPatientsInHospital(hospitalId: String!): [CovidRegister!]
  currentUser: User!
}

type Mutation {
  addHospital(hospital: HospitalInput!): Boolean!
  addMedicine(medicine: MedicineInput!): Boolean!
  hireStaff(staffId: String!, hospitalId: String!): Boolean!
  hireDoctor(doctorId: String!, hospitalId: String!): Boolean!
  createAppointment(patientId: String!): Boolean!
  prescribeMedicines(medicines: [String!]!, patientId: String!): Boolean!
  addCovidRecord(entry: CovidEntry!, patientId: String!): Boolean!
  visitHospital(hospitalId: String!): Boolean!
  addRoom(roomNo: Int!): Boolean!
  addBed(bedNo: Int!, roomNo: Int!): Boolean!
  publishTestResult(description: String, reason: TestReasons!, patientId: String!): Boolean!
  assignBed(patientId: String!, bedNo: Int!, roomNo: Int!): Boolean!
  login(params: LoginInput!): Boolean!
  logout: Boolean!
  registerAsStaff(staff: StaffInput!, user: UserInput!): Boolean!
  registerAsDoctor(doctor: DoctorInput!, user: UserInput!): Boolean!
  registerAsPatient(patient: PatientInput!, user: UserInput!): Boolean!
  registerAsAdmin(admin: AdminInput!, user: UserInput!): Boolean!
}
